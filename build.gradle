import groovy.transform.Field

import java.util.jar.Attributes
import java.util.jar.JarFile
import java.util.jar.Manifest
import java.util.zip.ZipInputStream

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

final commitId

if (hasProperty("grgit")) { // If there's a valid Git repository, get the latest commit ID
    commitId = "${grgit.head().abbreviatedId}"
} else { // Else fall back to NOGIT
    commitId = "NOGIT"
}

version = "${mc_version}-${mod_version}"
//version = "${mc_version}-${mod_version}-${commitId}"
group = "${package_group}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${mod_name}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: project.mappings_channel, version: project.mappings_version

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                swap_things {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                swap_things {
                    source sourceSets.main
                }
            }
        }
    }
}


repositories {
    mavenCentral()
    maven { url = "http://dvs1.progwml6.com/files/maven/" }
    maven { url = "https://tehnut.info/maven/" }
    maven { url = 'https://jitpack.io/' }
}

configurations {
    embed {
        transitive = false
    }

    compile.extendsFrom embed
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs.addAll(['-Xlint:unchecked', '-Xlint:deprecation'])
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

artifacts {
    archives javadocJar
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "Swapping Things",
                "Specification-Vendor"    : "ChiKitsune",
                "Specification-Version"   : "${mc_version}-${mod_version}",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "ChiKitsune",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
}

// makeLibraryMetas task adapted from covers1624's ContainedDepsPlugin:
// https://github.com/covers1624/GradleStuff
// TODO: Contained dependencies are disabled in 1.14, re-evaluate when they're re-enabled
@Field def MAVEN_ARTIFACT = new Attributes.Name("Maven-Artifact")

task makeLibraryMetas {
    outputs.upToDateWhen { false }

    def temp = getTemporaryDir()
    if (temp.exists()) {
        delete temp.listFiles()
    }

    def configuration = configurations.embed

    configuration.getResolvedConfiguration().getResolvedArtifacts().forEach { dep ->
        def file = dep.getFile()
        def mavenArtifact = dep.getId().getComponentIdentifier().toString()
        if (!hasMavenArtifactAttribute(file)) {
            def manifest = new Manifest()
            def attributes = manifest.getMainAttributes()
            attributes.put Attributes.Name.MANIFEST_VERSION, "1.0"
            attributes.put MAVEN_ARTIFACT, mavenArtifact

            new File(temp, file.getName() + ".meta").withOutputStream { os ->
                manifest.write(os)
            }
        }
    }

    def str = configuration.collect { file -> file.getName() }.join(" ")
    def tasks = project.tasks.withType(Jar.class)
    tasks.each { task -> task.from temp, { CopySpec spec -> spec.rename '(.+.jar.meta)', 'META-INF/libraries/$1' } }
    tasks.each { task -> task.from configuration, { CopySpec spec -> spec.rename '(.+.jar)', 'META-INF/libraries/$1' } }
    tasks.each { task -> task.getManifest().getAttributes().putAt 'ContainedDeps', str }
}

tasks.withType(Jar.class).each { task ->
    task.dependsOn(makeLibraryMetas)
}

boolean hasMavenArtifactAttribute(File file) {
    def zi = new ZipInputStream((InputStream) new FileInputStream(file))

    def ze = zi.getNextEntry()
    while (ze != null) {
        if (ze.getName().equalsIgnoreCase(JarFile.MANIFEST_NAME)) {
            def manifest = new Manifest((InputStream) zi)
            if (manifest.getMainAttributes().containsKey(MAVEN_ARTIFACT)) {
                zi.closeQuietly()
                return true
            }
        }
        ze = zi.getNextEntry()
    }

    try {
        zi.close()
    }
    catch (ignored) {
    }

    return false
}